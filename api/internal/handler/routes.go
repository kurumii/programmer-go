// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	interviews "github.com/minibear2333/programmer-go/api/internal/handler/interviews"
	interviews_tags "github.com/minibear2333/programmer-go/api/internal/handler/interviews_tags"
	login "github.com/minibear2333/programmer-go/api/internal/handler/login"
	user "github.com/minibear2333/programmer-go/api/internal/handler/user"
	"github.com/minibear2333/programmer-go/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: login.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPut,
				Path:    "/user/:_id",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/:_id",
				Handler: user.GetUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user_interview_status/:_id",
				Handler: user.GetInterviewStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user_followers/:_id",
				Handler: user.GetAllFollowersHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user_following/:_id",
				Handler: user.GetAllFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user_following/:_id",
				Handler: user.AddFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user_following/:_id",
				Handler: user.DeleteFollowingHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user_star_interviews/:_id",
				Handler: user.GetAllStarInterviewsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user_star_interviews/:_id",
				Handler: user.AddStarInterviewHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/user_star_interviews/:_id",
				Handler: user.DeleteStarInterviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/interviews",
				Handler: interviews.AddInterviewHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/interviews/:_id",
				Handler: interviews.DeleteInterviewHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/interviews/:_id",
				Handler: interviews.UpdateInterviewHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/interviews/:_id",
				Handler: interviews.GetInterviewHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/interviews",
				Handler: interviews.GetAllInterviewHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/interviews_tags",
				Handler: interviews_tags.GetAllInterviewTagsHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/v1/api"),
	)
}
